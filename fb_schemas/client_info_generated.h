// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENTINFO_AARGO_H_
#define FLATBUFFERS_GENERATED_CLIENTINFO_AARGO_H_

#include "flatbuffers/flatbuffers.h"

namespace Aargo {

struct WeightT;
struct WeightTBuilder;

struct AgeT;
struct AgeTBuilder;

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct ClientInfosT;
struct ClientInfosTBuilder;

enum class WeightUnit : int8_t {
  Kg = 0,
  MIN = Kg,
  MAX = Kg
};

inline const WeightUnit (&EnumValuesWeightUnit())[1] {
  static const WeightUnit values[] = {
    WeightUnit::Kg
  };
  return values;
}

inline const char * const *EnumNamesWeightUnit() {
  static const char * const names[2] = {
    "Kg",
    nullptr
  };
  return names;
}

inline const char *EnumNameWeightUnit(WeightUnit e) {
  if (flatbuffers::IsOutRange(e, WeightUnit::Kg, WeightUnit::Kg)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesWeightUnit()[index];
}

enum class AgeUnit : int8_t {
  Years = 0,
  MIN = Years,
  MAX = Years
};

inline const AgeUnit (&EnumValuesAgeUnit())[1] {
  static const AgeUnit values[] = {
    AgeUnit::Years
  };
  return values;
}

inline const char * const *EnumNamesAgeUnit() {
  static const char * const names[2] = {
    "Years",
    nullptr
  };
  return names;
}

inline const char *EnumNameAgeUnit(AgeUnit e) {
  if (flatbuffers::IsOutRange(e, AgeUnit::Years, AgeUnit::Years)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAgeUnit()[index];
}

enum class Gender : int8_t {
  Male = 0,
  Female = 1,
  MIN = Male,
  MAX = Female
};

inline const Gender (&EnumValuesGender())[2] {
  static const Gender values[] = {
    Gender::Male,
    Gender::Female
  };
  return values;
}

inline const char * const *EnumNamesGender() {
  static const char * const names[3] = {
    "Male",
    "Female",
    nullptr
  };
  return names;
}

inline const char *EnumNameGender(Gender e) {
  if (flatbuffers::IsOutRange(e, Gender::Male, Gender::Female)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGender()[index];
}

enum class Clientinfo : uint8_t {
  NONE = 0,
  Person = 1,
  Group = 2,
  MIN = NONE,
  MAX = Group
};

inline const Clientinfo (&EnumValuesClientinfo())[3] {
  static const Clientinfo values[] = {
    Clientinfo::NONE,
    Clientinfo::Person,
    Clientinfo::Group
  };
  return values;
}

inline const char * const *EnumNamesClientinfo() {
  static const char * const names[4] = {
    "NONE",
    "Person",
    "Group",
    nullptr
  };
  return names;
}

inline const char *EnumNameClientinfo(Clientinfo e) {
  if (flatbuffers::IsOutRange(e, Clientinfo::NONE, Clientinfo::Group)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesClientinfo()[index];
}

template<typename T> struct ClientinfoTraits {
  static const Clientinfo enum_value = Clientinfo::NONE;
};

template<> struct ClientinfoTraits<Aargo::Person> {
  static const Clientinfo enum_value = Clientinfo::Person;
};

template<> struct ClientinfoTraits<Aargo::Group> {
  static const Clientinfo enum_value = Clientinfo::Group;
};

bool VerifyClientinfo(flatbuffers::Verifier &verifier, const void *obj, Clientinfo type);
bool VerifyClientinfoVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct WeightT FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WeightTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4,
    VT_UNIT = 6
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  Aargo::WeightUnit unit() const {
    return static_cast<Aargo::WeightUnit>(GetField<int8_t>(VT_UNIT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           VerifyField<int8_t>(verifier, VT_UNIT) &&
           verifier.EndTable();
  }
};

struct WeightTBuilder {
  typedef WeightT Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(WeightT::VT_VALUE, value, 0.0f);
  }
  void add_unit(Aargo::WeightUnit unit) {
    fbb_.AddElement<int8_t>(WeightT::VT_UNIT, static_cast<int8_t>(unit), 0);
  }
  explicit WeightTBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WeightT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WeightT>(end);
    return o;
  }
};

inline flatbuffers::Offset<WeightT> CreateWeightT(
    flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f,
    Aargo::WeightUnit unit = Aargo::WeightUnit::Kg) {
  WeightTBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_unit(unit);
  return builder_.Finish();
}

struct AgeT FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AgeTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4,
    VT_UNIT = 6
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  Aargo::AgeUnit unit() const {
    return static_cast<Aargo::AgeUnit>(GetField<int8_t>(VT_UNIT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           VerifyField<int8_t>(verifier, VT_UNIT) &&
           verifier.EndTable();
  }
};

struct AgeTBuilder {
  typedef AgeT Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(AgeT::VT_VALUE, value, 0.0f);
  }
  void add_unit(Aargo::AgeUnit unit) {
    fbb_.AddElement<int8_t>(AgeT::VT_UNIT, static_cast<int8_t>(unit), 0);
  }
  explicit AgeTBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AgeT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AgeT>(end);
    return o;
  }
};

inline flatbuffers::Offset<AgeT> CreateAgeT(
    flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f,
    Aargo::AgeUnit unit = Aargo::AgeUnit::Years) {
  AgeTBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_unit(unit);
  return builder_.Finish();
}

struct Person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_GENDER = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const Aargo::AgeT *age() const {
    return GetPointer<const Aargo::AgeT *>(VT_AGE);
  }
  const Aargo::WeightT *weight() const {
    return GetPointer<const Aargo::WeightT *>(VT_WEIGHT);
  }
  Aargo::Gender gender() const {
    return static_cast<Aargo::Gender>(GetField<int8_t>(VT_GENDER, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_AGE) &&
           verifier.VerifyTable(age()) &&
           VerifyOffset(verifier, VT_WEIGHT) &&
           verifier.VerifyTable(weight()) &&
           VerifyField<int8_t>(verifier, VT_GENDER) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(flatbuffers::Offset<Aargo::AgeT> age) {
    fbb_.AddOffset(Person::VT_AGE, age);
  }
  void add_weight(flatbuffers::Offset<Aargo::WeightT> weight) {
    fbb_.AddOffset(Person::VT_WEIGHT, weight);
  }
  void add_gender(Aargo::Gender gender) {
    fbb_.AddElement<int8_t>(Person::VT_GENDER, static_cast<int8_t>(gender), 0);
  }
  explicit PersonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline flatbuffers::Offset<Person> CreatePerson(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<Aargo::AgeT> age = 0,
    flatbuffers::Offset<Aargo::WeightT> weight = 0,
    Aargo::Gender gender = Aargo::Gender::Male) {
  PersonBuilder builder_(_fbb);
  builder_.add_weight(weight);
  builder_.add_age(age);
  builder_.add_name(name);
  builder_.add_gender(gender);
  return builder_.Finish();
}

inline flatbuffers::Offset<Person> CreatePersonDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<Aargo::AgeT> age = 0,
    flatbuffers::Offset<Aargo::WeightT> weight = 0,
    Aargo::Gender gender = Aargo::Gender::Male) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Aargo::CreatePerson(
      _fbb,
      name__,
      age,
      weight,
      gender);
}

struct Group FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AVG_AGE = 6,
    VT_AVG_WEIGHT = 8,
    VT_LIST_NAMES = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const Aargo::AgeT *avg_age() const {
    return GetPointer<const Aargo::AgeT *>(VT_AVG_AGE);
  }
  const Aargo::WeightT *avg_weight() const {
    return GetPointer<const Aargo::WeightT *>(VT_AVG_WEIGHT);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *list_names() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_LIST_NAMES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_AVG_AGE) &&
           verifier.VerifyTable(avg_age()) &&
           VerifyOffset(verifier, VT_AVG_WEIGHT) &&
           verifier.VerifyTable(avg_weight()) &&
           VerifyOffset(verifier, VT_LIST_NAMES) &&
           verifier.VerifyVector(list_names()) &&
           verifier.VerifyVectorOfStrings(list_names()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Group::VT_NAME, name);
  }
  void add_avg_age(flatbuffers::Offset<Aargo::AgeT> avg_age) {
    fbb_.AddOffset(Group::VT_AVG_AGE, avg_age);
  }
  void add_avg_weight(flatbuffers::Offset<Aargo::WeightT> avg_weight) {
    fbb_.AddOffset(Group::VT_AVG_WEIGHT, avg_weight);
  }
  void add_list_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> list_names) {
    fbb_.AddOffset(Group::VT_LIST_NAMES, list_names);
  }
  explicit GroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline flatbuffers::Offset<Group> CreateGroup(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<Aargo::AgeT> avg_age = 0,
    flatbuffers::Offset<Aargo::WeightT> avg_weight = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> list_names = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_list_names(list_names);
  builder_.add_avg_weight(avg_weight);
  builder_.add_avg_age(avg_age);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Group> CreateGroupDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<Aargo::AgeT> avg_age = 0,
    flatbuffers::Offset<Aargo::WeightT> avg_weight = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *list_names = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto list_names__ = list_names ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*list_names) : 0;
  return Aargo::CreateGroup(
      _fbb,
      name__,
      avg_age,
      avg_weight,
      list_names__);
}

struct ClientInfosT FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientInfosTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_INFOS_TYPE = 4,
    VT_CLIENT_INFOS = 6
  };
  const flatbuffers::Vector<uint8_t> *client_infos_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CLIENT_INFOS_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *client_infos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_CLIENT_INFOS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT_INFOS_TYPE) &&
           verifier.VerifyVector(client_infos_type()) &&
           VerifyOffset(verifier, VT_CLIENT_INFOS) &&
           verifier.VerifyVector(client_infos()) &&
           VerifyClientinfoVector(verifier, client_infos(), client_infos_type()) &&
           verifier.EndTable();
  }
};

struct ClientInfosTBuilder {
  typedef ClientInfosT Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_client_infos_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> client_infos_type) {
    fbb_.AddOffset(ClientInfosT::VT_CLIENT_INFOS_TYPE, client_infos_type);
  }
  void add_client_infos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> client_infos) {
    fbb_.AddOffset(ClientInfosT::VT_CLIENT_INFOS, client_infos);
  }
  explicit ClientInfosTBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClientInfosT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientInfosT>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientInfosT> CreateClientInfosT(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> client_infos_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> client_infos = 0) {
  ClientInfosTBuilder builder_(_fbb);
  builder_.add_client_infos(client_infos);
  builder_.add_client_infos_type(client_infos_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientInfosT> CreateClientInfosTDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *client_infos_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *client_infos = nullptr) {
  auto client_infos_type__ = client_infos_type ? _fbb.CreateVector<uint8_t>(*client_infos_type) : 0;
  auto client_infos__ = client_infos ? _fbb.CreateVector<flatbuffers::Offset<void>>(*client_infos) : 0;
  return Aargo::CreateClientInfosT(
      _fbb,
      client_infos_type__,
      client_infos__);
}

inline bool VerifyClientinfo(flatbuffers::Verifier &verifier, const void *obj, Clientinfo type) {
  switch (type) {
    case Clientinfo::NONE: {
      return true;
    }
    case Clientinfo::Person: {
      auto ptr = reinterpret_cast<const Aargo::Person *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Clientinfo::Group: {
      auto ptr = reinterpret_cast<const Aargo::Group *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyClientinfoVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyClientinfo(
        verifier,  values->Get(i), types->GetEnum<Clientinfo>(i))) {
      return false;
    }
  }
  return true;
}

inline const Aargo::ClientInfosT *GetClientInfosT(const void *buf) {
  return flatbuffers::GetRoot<Aargo::ClientInfosT>(buf);
}

inline const Aargo::ClientInfosT *GetSizePrefixedClientInfosT(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Aargo::ClientInfosT>(buf);
}

inline bool VerifyClientInfosTBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Aargo::ClientInfosT>(nullptr);
}

inline bool VerifySizePrefixedClientInfosTBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Aargo::ClientInfosT>(nullptr);
}

inline void FinishClientInfosTBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Aargo::ClientInfosT> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientInfosTBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Aargo::ClientInfosT> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Aargo

#endif  // FLATBUFFERS_GENERATED_CLIENTINFO_AARGO_H_
